package GP.test;
// Generated by ComTest BEGIN
import GP.*;
import java.util.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.26 11:21:25 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class LuistelijatTest {



  // Generated by ComTest BEGIN
  /** testIterator34 */
  @Test
  public void testIterator34() {    // Luistelijat: 34
    Luistelijat luistelijat = new Luistelijat(); 
    Luistelija alexTrus = new Luistelija(1,2); 
    luistelijat.lisaa(alexTrus); 
    Luistelija anya = new Luistelija(2); 
    luistelijat.lisaa(anya); 
    Luistelija aliona = new Luistelija(4,7); 
    luistelijat.lisaa(aliona); 
    Iterator<Luistelija> iteraattori = luistelijat.iterator(); 
    assertEquals("From: Luistelijat line: 47", alexTrus, iteraattori.next()); 
    assertEquals("From: Luistelijat line: 48", anya, iteraattori.next()); 
    assertEquals("From: Luistelijat line: 49", aliona, iteraattori.next()); 
    try {
    assertEquals("From: Luistelijat line: 50", alexTrus, iteraattori.next()); 
    fail("Luistelijat: 50 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int id1[] = { 1,2,4} ; 
    for ( Luistelija luistelija : luistelijat) {
    assertEquals("From: Luistelijat line: 56", id1[n], luistelija.getKilpailuId1()); n++; 
    }
    assertEquals("From: Luistelijat line: 59", 3, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaLuistelijat82 */
  @Test
  public void testAnnaLuistelijat82() {    // Luistelijat: 82
    Luistelijat luistelijat = new Luistelijat(); 
    Luistelija alexTrus = new Luistelija(1,2); 
    luistelijat.lisaa(alexTrus); 
    Luistelija anya = new Luistelija(2); 
    luistelijat.lisaa(anya); 
    Luistelija aliona = new Luistelija(4,7); 
    luistelijat.lisaa(aliona); 
    List<Luistelija> kilpailunLuistelijat; 
    kilpailunLuistelijat = luistelijat.annaLuistelijat(1); 
    assertEquals("From: Luistelijat line: 95", 1, kilpailunLuistelijat.size()); 
    kilpailunLuistelijat = luistelijat.annaLuistelijat(2); 
    assertEquals("From: Luistelijat line: 97", 2, kilpailunLuistelijat.size()); 
    assertEquals("From: Luistelijat line: 98", true, kilpailunLuistelijat.get(0) == alexTrus); 
    assertEquals("From: Luistelijat line: 99", true, kilpailunLuistelijat.get(1) == anya); 
    assertEquals("From: Luistelijat line: 100", false, kilpailunLuistelijat.get(1) == aliona); 
    kilpailunLuistelijat = luistelijat.annaLuistelijat(3); 
    assertEquals("From: Luistelijat line: 102", 0, kilpailunLuistelijat.size()); 
    kilpailunLuistelijat = luistelijat.annaLuistelijat(4); 
    assertEquals("From: Luistelijat line: 104", 1, kilpailunLuistelijat.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta142 
   * @throws Poikkeukset when error
   */
  @Test
  public void testLueTiedostosta142() throws Poikkeukset {    // Luistelijat: 142
    Luistelijat luistelijat = new Luistelijat(); 
    Luistelija rika1 = new Luistelija(); 
    Luistelija rika2 = new Luistelija(); 
    rika1.luo(); 
    rika2.luo(); 
    rika1.vastaaRikaKihira(1,2); 
    rika2.vastaaRikaKihira(4); 
    String hakemisto = "testiGP"; 
    String tiedostonNimi = hakemisto+"/luistelijat"; 
    File tiedosto = new File(tiedostonNimi + ".dat"); 
    File kansio = new File(hakemisto); 
    kansio.mkdir(); 
    tiedosto.delete(); 
    luistelijat.setTiedostonPerusnimi(tiedostonNimi); 
    try {
    luistelijat.lueTiedostosta(); 
    fail("Luistelijat: 160 Did not throw Poikkeukset");
    } catch(Poikkeukset _e_){ _e_.getMessage(); }
    luistelijat.lisaa(rika1); 
    luistelijat.lisaa(rika2); 
    luistelijat.tallenna(); 
    luistelijat = new Luistelijat(); 
    luistelijat.setTiedostonPerusnimi(tiedostonNimi); 
    luistelijat.lueTiedostosta(); 
    Iterator<Luistelija> luistelija = luistelijat.iterator(); 
    assertEquals("From: Luistelijat line: 168", rika1.toString(), luistelija.next().toString()); 
    assertEquals("From: Luistelijat line: 169", rika2.toString(), luistelija.next().toString()); 
    assertEquals("From: Luistelijat line: 170", false, luistelija.hasNext()); 
    luistelijat.lisaa(rika2); 
    luistelijat.tallenna(); 
    assertEquals("From: Luistelijat line: 173", true, tiedosto.delete()); 
    assertEquals("From: Luistelijat line: 174", true, kansio.delete()); 
  } // Generated by ComTest END
}