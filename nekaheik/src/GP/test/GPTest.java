package GP.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import GP.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.26 11:16:25 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class GPTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa41 
   * @throws Poikkeukset when error
   */
  @Test
  public void testLisaa41() throws Poikkeukset {    // GP: 41
    GP gp = new GP(); 
    assertEquals("From: GP line: 44", 0, gp.getKilpailuja()); 
    Kilpailu usa1 = new Kilpailu(), usa2 = new Kilpailu(); 
    gp.lisaa(usa1); 
    gp.lisaa(usa2); 
    assertEquals("From: GP line: 48", 2, gp.getKilpailuja()); 
    assertEquals("From: GP line: 49", usa1, gp.annaKilpailu(0)); 
    assertEquals("From: GP line: 50", usa2, gp.annaKilpailu(1)); 
    try {
    assertEquals("From: GP line: 51", usa1, gp.annaKilpailu(4)); 
    fail("GP: 51 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    gp.lisaa(usa1); 
    gp.lisaa(usa2); 
    gp.lisaa(usa1); 
    gp.lisaa(usa2); 
    try {
    gp.lisaa(usa1); 
    fail("GP: 56 Did not throw Poikkeukset");
    } catch(Poikkeukset _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta86 
   * @throws Poikkeukset when error
   */
  @Test
  public void testLueTiedostosta86() throws Poikkeukset {    // GP: 86
    GP gp = new GP(); 
    Kilpailu skate1 = new Kilpailu(); 
    Kilpailu skate2 = new Kilpailu(); 
    skate1.vastaaSkateAmerica(); 
    skate2.vastaaSkateAmerica(); 
    skate1.luo(); 
    skate2.luo(); 
    Luistelija rika1 = new Luistelija(); 
    Luistelija rika2 = new Luistelija(); 
    Luistelija rika3 = new Luistelija(); 
    Luistelija rika4 = new Luistelija(); 
    rika1.luo(); 
    rika2.luo(); 
    rika3.luo(); 
    rika4.luo(); 
    rika1.vastaaRikaKihira(skate1.getIdNro(), skate2.getIdNro()); 
    rika2.vastaaRikaKihira(skate1.getIdNro()); 
    rika3.vastaaRikaKihira(skate1.getIdNro(), skate2.getIdNro()); 
    rika4.vastaaRikaKihira(skate2.getIdNro()); 
    String hakemisto = "testiGP"; 
    String tiedostonNimi1 = hakemisto+"/luistelijat"; 
    String tiedostonNimi2 = hakemisto+"/kilpailut"; 
    File kansio = new File(hakemisto); 
    File tiedosto1 = new File(tiedostonNimi1 + ".dat"); 
    File tiedosto2 = new File(tiedostonNimi2 + ".dat"); 
    kansio.mkdir(); 
    tiedosto1.delete(); 
    tiedosto2.delete(); 
    gp.setTiedosto(hakemisto); 
    try {
    gp.lueTiedostosta(hakemisto); 
    fail("GP: 122 Did not throw Poikkeukset");
    } catch(Poikkeukset _e_){ _e_.getMessage(); }
    gp.lisaa(skate1); 
    gp.lisaa(skate2); 
    gp.lisaa(rika1); 
    gp.lisaa(rika2); 
    gp.lisaa(rika3); 
    gp.lisaa(rika4); 
    gp.tallenna(); 
    gp = new GP(); 
    gp.lueTiedostosta(hakemisto); 
    assertEquals("From: GP line: 133", skate1.toString(), gp.annaKilpailu(0).toString()); 
    assertEquals("From: GP line: 134", skate2.toString(), gp.annaKilpailu(1).toString()); 
    try {
    gp.annaKilpailu(2); 
    fail("GP: 135 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    List<Luistelija> kilpailun1Luistelijat = gp.annaLuistelijat(skate1); 
    Iterator<Luistelija> luistelija1 = kilpailun1Luistelijat.iterator(); 
    assertEquals("From: GP line: 139", rika1.toString(), luistelija1.next().toString()); 
    assertEquals("From: GP line: 140", rika2.toString(), luistelija1.next().toString()); 
    assertEquals("From: GP line: 141", rika3.toString(), luistelija1.next().toString()); 
    assertEquals("From: GP line: 142", false, luistelija1.hasNext()); 
    List<Luistelija> kilpailun2Luistelijat = gp.annaLuistelijat(skate2); 
    Iterator<Luistelija> luistelija2 = kilpailun2Luistelijat.iterator(); 
    assertEquals("From: GP line: 145", rika1.toString(), luistelija2.next().toString()); 
    assertEquals("From: GP line: 146", rika3.toString(), luistelija2.next().toString()); 
    assertEquals("From: GP line: 147", rika4.toString(), luistelija2.next().toString()); 
    assertEquals("From: GP line: 148", false, luistelija2.hasNext()); 
    assertEquals("From: GP line: 150", true, tiedosto1.delete()); 
    assertEquals("From: GP line: 151", true, tiedosto2.delete()); 
    assertEquals("From: GP line: 152", true, kansio.delete()); 
  } // Generated by ComTest END
}